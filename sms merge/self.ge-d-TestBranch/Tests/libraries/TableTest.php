<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2022-05-16 at 23:25:04.
 */
class XHRSTableTest extends PHPUnit_Framework_TestCase
{
	/**
	 * @var XHRSTable
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp(): void
	{
		$this->object = new XHRSTable;

	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown(): void
	{
		
	}

	/**
	 * Generated from @assert ('2022-05-10 00:00:00', '2022-05-11 00:00:00') == 8.
	 *
	 * @covers XHRSTable::NightHourCalculator
	 */
	public function testNightHourCalculator()
	{
		$this->assertEquals(
						8,
						$this->object->NightHourCalculator( '2022-05-10 00:00:00', '2022-05-11 00:00:00' )
		);

	}

	/**
	 * Generated from @assert ('2022-05-10 21:00:00', '2022-05-11 21:00:00') == 8.
	 *
	 * @covers XHRSTable::NightHourCalculator
	 */
	public function testNightHourCalculator2()
	{
		$this->assertEquals(
						8,
						$this->object->NightHourCalculator( '2022-05-10 21:00:00', '2022-05-11 21:00:00' )
		);

	}

	/**
	 * Generated from @assert ('2022-05-10 23:00:00', '2022-05-11 23:00:00') == 8.
	 *
	 * @covers XHRSTable::NightHourCalculator
	 */
	public function testNightHourCalculator3()
	{
		$this->assertEquals(
						8,
						$this->object->NightHourCalculator( '2022-05-10 23:00:00', '2022-05-11 23:00:00' )
		);

	}

	/**
	 * Generated from @assert ('2022-05-10 01:00:00', '2022-05-11 01:00:00') == 8.
	 *
	 * @covers XHRSTable::NightHourCalculator
	 */
	public function testNightHourCalculator4()
	{
		$this->assertEquals(
						8,
						$this->object->NightHourCalculator( '2022-05-10 01:00:00', '2022-05-11 01:00:00' )
		);

	}

	/**
	 * Generated from @assert ('2022-05-10 21:00:00', '2022-05-11 03:00:00') == 5.
	 *
	 * @covers XHRSTable::NightHourCalculator
	 */
	public function testNightHourCalculator5()
	{
		$this->assertEquals(
						5,
						$this->object->NightHourCalculator( '2022-05-10 21:00:00', '2022-05-11 03:00:00' )
		);

	}

	/**
	 * Generated from @assert ('2022-05-10 21:00:00', '2022-05-11 00:00:00') == 2.
	 *
	 * @covers XHRSTable::NightHourCalculator
	 */
	public function testNightHourCalculator6()
	{
		$this->assertEquals(
						2,
						$this->object->NightHourCalculator( '2022-05-10 21:00:00', '2022-05-11 00:00:00' )
		);

	}

	/**
	 * Generated from @assert ('2022-05-10 21:00:00', '2022-05-10 23:00:00') == 1.
	 *
	 * @covers XHRSTable::NightHourCalculator
	 */
	public function testNightHourCalculator7()
	{
		$this->assertEquals(
						1,
						$this->object->NightHourCalculator( '2022-05-10 21:00:00', '2022-05-10 23:00:00' )
		);

	}

	/**
	 * Generated from @assert ('2022-05-10 21:00:00', '2022-05-10 23:30:00') == 1.5.
	 *
	 * @covers XHRSTable::NightHourCalculator
	 */
	public function testNightHourCalculator8()
	{
		$this->assertEquals(
						1.5,
						$this->object->NightHourCalculator( '2022-05-10 21:00:00', '2022-05-10 23:30:00' )
		);

	}

	/**
	 * Generated from @assert ('2022-05-11 00:00:00', '2022-05-11 21:00:00') == 6.
	 *
	 * @covers XHRSTable::NightHourCalculator
	 */
	public function testNightHourCalculator9()
	{
		$this->assertEquals(
						6,
						$this->object->NightHourCalculator( '2022-05-11 00:00:00', '2022-05-11 21:00:00' )
		);

	}

	/**
	 * Generated from @assert ('2022-05-10 03:00:00', '2022-05-10 05:00:00') == 2.
	 *
	 * @covers XHRSTable::NightHourCalculator
	 */
	public function testNightHourCalculator10()
	{
		$this->assertEquals(
						2,
						$this->object->NightHourCalculator( '2022-05-10 03:00:00', '2022-05-10 05:00:00' )
		);

	}

	/**
	 * Generated from @assert ('2022-05-10 00:00:00', '2022-05-10 05:00:00') == 5.
	 *
	 * @covers XHRSTable::NightHourCalculator
	 */
	public function testNightHourCalculator11()
	{
		$this->assertEquals(
						5,
						$this->object->NightHourCalculator( '2022-05-10 00:00:00', '2022-05-10 05:00:00' )
		);

	}

	/**
	 * Generated from @assert ('2022-05-10 03:15:00', '2022-05-10 05:00:00') == 1.75.
	 *
	 * @covers XHRSTable::NightHourCalculator
	 */
	public function testNightHourCalculator12()
	{
		$this->assertEquals(
						1.75,
						$this->object->NightHourCalculator( '2022-05-10 03:15:00', '2022-05-10 05:00:00' )
		);

	}

	/**
	 * Generated from @assert ('2022-05-10 04:00:00', '2022-05-10 09:00:00') == 2.
	 *
	 * @covers XHRSTable::NightHourCalculator
	 */
	public function testNightHourCalculator13()
	{
		$this->assertEquals(
						2,
						$this->object->NightHourCalculator( '2022-05-10 04:00:00', '2022-05-10 09:00:00' )
		);

	}

	/**
	 * Generated from @assert ('2022-05-10 05:30:00', '2022-05-10 06:00:00') == 0.5.
	 *
	 * @covers XHRSTable::NightHourCalculator
	 */
	public function testNightHourCalculator14()
	{
		$this->assertEquals(
						0.5,
						$this->object->NightHourCalculator( '2022-05-10 05:30:00', '2022-05-10 06:00:00' )
		);

	}

	/**
	 * Generated from @assert ('2022-05-10 03:30:00', '2022-05-10 23:00:00') == 3.5.
	 *
	 * @covers XHRSTable::NightHourCalculator
	 */
	public function testNightHourCalculator15()
	{
		$this->assertEquals(
						3.5,
						$this->object->NightHourCalculator( '2022-05-10 03:30:00', '2022-05-10 23:00:00' )
		);

	}

	/**
	 * @covers XHRSTable::GetWorkerCalculusTypes
	 * @todo   Implement testGetWorkerCalculusTypes().
	 */
	public function testGetWorkerCalculusTypes()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
						'This test has not been implemented yet.'
		);

	}

	/**
	 * @covers XHRSTable::GetWorkersData
	 * @todo   Implement testGetWorkersData().
	 */
	public function testGetWorkersData()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
						'This test has not been implemented yet.'
		);

	}

	/**
	 * @covers XHRSTable::GetOverTimes
	 * @todo   Implement testGetOverTimes().
	 */
	public function testGetOverTimes()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
						'This test has not been implemented yet.'
		);

	}

	/**
	 * @covers XHRSTable::getWorkersOuts
	 * @todo   Implement testGetWorkersOuts().
	 */
	public function testGetWorkersOuts()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
						'This test has not been implemented yet.'
		);

	}

	/**
	 * @covers XHRSTable::getTable
	 * @todo   Implement testGetTable().
	 */
	public function testGetTable()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
						'This test has not been implemented yet.'
		);

	}

	/**
	 * @covers XHRSTable::getHoursForSingleDay
	 * @todo   Implement testGetHoursForSingleDay().
	 */
	public function testGetHoursForSingleDay()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
						'This test has not been implemented yet.'
		);

	}

	/**
	 * @covers XHRSTable::GetMarginDatesFromBillID
	 * @todo   Implement testGetMarginDatesFromBillID().
	 */
	public function testGetMarginDatesFromBillID()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
						'This test has not been implemented yet.'
		);

	}

	/**
	 * @covers XHRSTable::Generate
	 * @todo   Implement testGenerate().
	 */
	public function testGenerate()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
						'This test has not been implemented yet.'
		);

	}

	/**
	 * @covers XHRSTable::SendAlert
	 * @todo   Implement testSendAlert().
	 */
	public function testSendAlert()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
						'This test has not been implemented yet.'
		);

	}

	/**
	 * @covers XHRSTable::CalculateHoursDiff
	 * @todo   Implement testCalculateHoursDiff().
	 */
	public function testCalculateHoursDiff()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
						'This test has not been implemented yet.'
		);

	}

	/**
	 * @covers XHRSTable::LoadDays
	 * @todo   Implement testLoadDays().
	 */
	public function testLoadDays()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
						'This test has not been implemented yet.'
		);

	}

	/**
	 * @covers XHRSTable::LoadGraph
	 * @todo   Implement testLoadGraph().
	 */
	public function testLoadGraph()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
						'This test has not been implemented yet.'
		);

	}

}
